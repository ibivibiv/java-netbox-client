/*
 * NetBox API
 * API to access NetBox
 *
 * OpenAPI spec version: 2.5
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Aggregate;
import java.math.BigDecimal;
import io.swagger.client.model.Cable;
import io.swagger.client.model.Circuit;
import io.swagger.client.model.CircuitTermination;
import io.swagger.client.model.CircuitType;
import io.swagger.client.model.Cluster;
import io.swagger.client.model.ClusterGroup;
import io.swagger.client.model.ClusterType;
import io.swagger.client.model.ConfigContext;
import io.swagger.client.model.ConsolePort;
import io.swagger.client.model.ConsolePortTemplate;
import io.swagger.client.model.ConsoleServerPort;
import io.swagger.client.model.ConsoleServerPortTemplate;
import io.swagger.client.model.Device;
import io.swagger.client.model.DeviceBay;
import io.swagger.client.model.DeviceBayTemplate;
import io.swagger.client.model.DeviceRole;
import io.swagger.client.model.DeviceType;
import io.swagger.client.model.DeviceWithConfigContext;
import io.swagger.client.model.ExportTemplate;
import io.swagger.client.model.FrontPort;
import io.swagger.client.model.FrontPortTemplate;
import io.swagger.client.model.Graph;
import io.swagger.client.model.IPAddress;
import io.swagger.client.model.ImageAttachment;
import io.swagger.client.model.InterfaceTemplate;
import io.swagger.client.model.InventoryItem;
import io.swagger.client.model.Manufacturer;
import io.swagger.client.model.ModelInterface;
import io.swagger.client.model.ObjectChange;
import io.swagger.client.model.Platform;
import io.swagger.client.model.PowerOutlet;
import io.swagger.client.model.PowerOutletTemplate;
import io.swagger.client.model.PowerPort;
import io.swagger.client.model.PowerPortTemplate;
import io.swagger.client.model.Prefix;
import io.swagger.client.model.Provider;
import io.swagger.client.model.RIR;
import io.swagger.client.model.Rack;
import io.swagger.client.model.RackGroup;
import io.swagger.client.model.RackReservation;
import io.swagger.client.model.RackRole;
import io.swagger.client.model.RearPort;
import io.swagger.client.model.RearPortTemplate;
import io.swagger.client.model.Region;
import io.swagger.client.model.Role;
import io.swagger.client.model.Secret;
import io.swagger.client.model.SecretRole;
import io.swagger.client.model.Service;
import io.swagger.client.model.Site;
import io.swagger.client.model.Tag;
import io.swagger.client.model.Tenant;
import io.swagger.client.model.TenantGroup;
import io.swagger.client.model.TopologyMap;
import io.swagger.client.model.VLAN;
import io.swagger.client.model.VLANGroup;
import io.swagger.client.model.VRF;
import io.swagger.client.model.VirtualChassis;
import io.swagger.client.model.VirtualMachine;
import io.swagger.client.model.VirtualMachineWithConfigContext;
import io.swagger.client.model.WritableAggregate;
import io.swagger.client.model.WritableCable;
import io.swagger.client.model.WritableCircuit;
import io.swagger.client.model.WritableCircuitTermination;
import io.swagger.client.model.WritableCluster;
import io.swagger.client.model.WritableConfigContext;
import io.swagger.client.model.WritableConsolePort;
import io.swagger.client.model.WritableConsolePortTemplate;
import io.swagger.client.model.WritableConsoleServerPort;
import io.swagger.client.model.WritableConsoleServerPortTemplate;
import io.swagger.client.model.WritableDevice;
import io.swagger.client.model.WritableDeviceBay;
import io.swagger.client.model.WritableDeviceBayTemplate;
import io.swagger.client.model.WritableDeviceType;
import io.swagger.client.model.WritableFrontPort;
import io.swagger.client.model.WritableFrontPortTemplate;
import io.swagger.client.model.WritableGraph;
import io.swagger.client.model.WritableIPAddress;
import io.swagger.client.model.WritableInterface;
import io.swagger.client.model.WritableInterfaceTemplate;
import io.swagger.client.model.WritableInventoryItem;
import io.swagger.client.model.WritablePlatform;
import io.swagger.client.model.WritablePowerOutlet;
import io.swagger.client.model.WritablePowerOutletTemplate;
import io.swagger.client.model.WritablePowerPort;
import io.swagger.client.model.WritablePowerPortTemplate;
import io.swagger.client.model.WritablePrefix;
import io.swagger.client.model.WritableRack;
import io.swagger.client.model.WritableRackGroup;
import io.swagger.client.model.WritableRackReservation;
import io.swagger.client.model.WritableRearPort;
import io.swagger.client.model.WritableRearPortTemplate;
import io.swagger.client.model.WritableRegion;
import io.swagger.client.model.WritableSecret;
import io.swagger.client.model.WritableService;
import io.swagger.client.model.WritableSite;
import io.swagger.client.model.WritableTenant;
import io.swagger.client.model.WritableTopologyMap;
import io.swagger.client.model.WritableVLAN;
import io.swagger.client.model.WritableVLANGroup;
import io.swagger.client.model.WritableVRF;
import io.swagger.client.model.WritableVirtualChassis;
import io.swagger.client.model.WritableVirtualMachine;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiApi
 */
@Ignore
public class ApiApiTest {

    private final ApiApi api = new ApiApi();

    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsChoicesListTest() throws ApiException {
        api.apiCircuitsChoicesList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsChoicesReadTest() throws ApiException {
        String id = null;
        api.apiCircuitsChoicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTerminationsCreateTest() throws ApiException {
        WritableCircuitTermination body = null;
        CircuitTermination response = api.apiCircuitsCircuitTerminationsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTerminationsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiCircuitsCircuitTerminationsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTerminationsListTest() throws ApiException {
        String termSide = null;
        BigDecimal portSpeed = null;
        BigDecimal upstreamSpeed = null;
        String xconnectId = null;
        String q = null;
        String circuitId = null;
        String siteId = null;
        String site = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiCircuitsCircuitTerminationsList(termSide, portSpeed, upstreamSpeed, xconnectId, q, circuitId, siteId, site, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTerminationsPartialUpdateTest() throws ApiException {
        WritableCircuitTermination body = null;
        Integer id = null;
        CircuitTermination response = api.apiCircuitsCircuitTerminationsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTerminationsReadTest() throws ApiException {
        Integer id = null;
        CircuitTermination response = api.apiCircuitsCircuitTerminationsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTerminationsUpdateTest() throws ApiException {
        WritableCircuitTermination body = null;
        Integer id = null;
        CircuitTermination response = api.apiCircuitsCircuitTerminationsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTypesCreateTest() throws ApiException {
        CircuitType body = null;
        CircuitType response = api.apiCircuitsCircuitTypesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiCircuitsCircuitTypesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTypesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiCircuitsCircuitTypesList(name, slug, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTypesPartialUpdateTest() throws ApiException {
        CircuitType body = null;
        Integer id = null;
        CircuitType response = api.apiCircuitsCircuitTypesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTypesReadTest() throws ApiException {
        Integer id = null;
        CircuitType response = api.apiCircuitsCircuitTypesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitTypesUpdateTest() throws ApiException {
        CircuitType body = null;
        Integer id = null;
        CircuitType response = api.apiCircuitsCircuitTypesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitsCreateTest() throws ApiException {
        WritableCircuit body = null;
        Circuit response = api.apiCircuitsCircuitsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiCircuitsCircuitsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitsListTest() throws ApiException {
        String cid = null;
        String installDate = null;
        BigDecimal commitRate = null;
        String idIn = null;
        String q = null;
        String providerId = null;
        String provider = null;
        String typeId = null;
        String type = null;
        String status = null;
        String tenantId = null;
        String tenant = null;
        String siteId = null;
        String site = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiCircuitsCircuitsList(cid, installDate, commitRate, idIn, q, providerId, provider, typeId, type, status, tenantId, tenant, siteId, site, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitsPartialUpdateTest() throws ApiException {
        WritableCircuit body = null;
        Integer id = null;
        Circuit response = api.apiCircuitsCircuitsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitsReadTest() throws ApiException {
        Integer id = null;
        Circuit response = api.apiCircuitsCircuitsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsCircuitsUpdateTest() throws ApiException {
        WritableCircuit body = null;
        Integer id = null;
        Circuit response = api.apiCircuitsCircuitsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsProvidersCreateTest() throws ApiException {
        Provider body = null;
        Provider response = api.apiCircuitsProvidersCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsProvidersDeleteTest() throws ApiException {
        Integer id = null;
        api.apiCircuitsProvidersDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * A convenience method for rendering graphs for a particular provider.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsProvidersGraphsTest() throws ApiException {
        Integer id = null;
        Provider response = api.apiCircuitsProvidersGraphs(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsProvidersListTest() throws ApiException {
        String name = null;
        String slug = null;
        BigDecimal asn = null;
        String account = null;
        String idIn = null;
        String q = null;
        String siteId = null;
        String site = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiCircuitsProvidersList(name, slug, asn, account, idIn, q, siteId, site, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsProvidersPartialUpdateTest() throws ApiException {
        Provider body = null;
        Integer id = null;
        Provider response = api.apiCircuitsProvidersPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsProvidersReadTest() throws ApiException {
        Integer id = null;
        Provider response = api.apiCircuitsProvidersRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiCircuitsProvidersUpdateTest() throws ApiException {
        Provider body = null;
        Integer id = null;
        Provider response = api.apiCircuitsProvidersUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimCablesCreateTest() throws ApiException {
        WritableCable body = null;
        Cable response = api.apiDcimCablesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimCablesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimCablesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimCablesListTest() throws ApiException {
        String type = null;
        String status = null;
        String color = null;
        BigDecimal length = null;
        String lengthUnit = null;
        String q = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimCablesList(type, status, color, length, lengthUnit, q, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimCablesPartialUpdateTest() throws ApiException {
        WritableCable body = null;
        Integer id = null;
        Cable response = api.apiDcimCablesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimCablesReadTest() throws ApiException {
        Integer id = null;
        Cable response = api.apiDcimCablesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimCablesUpdateTest() throws ApiException {
        WritableCable body = null;
        Integer id = null;
        Cable response = api.apiDcimCablesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimChoicesListTest() throws ApiException {
        api.apiDcimChoicesList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimChoicesReadTest() throws ApiException {
        String id = null;
        api.apiDcimChoicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * &#x60;peer_device&#x60;: The name of the peer device * &#x60;peer_interface&#x60;: The name of the peer interface
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConnectedDeviceListTest() throws ApiException {
        String peerDevice = null;
        String peerInterface = null;
        Device response = api.apiDcimConnectedDeviceList(peerDevice, peerInterface);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleConnectionsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String site = null;
        String device = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimConsoleConnectionsList(name, connectionStatus, site, device, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortTemplatesCreateTest() throws ApiException {
        WritableConsolePortTemplate body = null;
        ConsolePortTemplate response = api.apiDcimConsolePortTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimConsolePortTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimConsolePortTemplatesList(name, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortTemplatesPartialUpdateTest() throws ApiException {
        WritableConsolePortTemplate body = null;
        Integer id = null;
        ConsolePortTemplate response = api.apiDcimConsolePortTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortTemplatesReadTest() throws ApiException {
        Integer id = null;
        ConsolePortTemplate response = api.apiDcimConsolePortTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortTemplatesUpdateTest() throws ApiException {
        WritableConsolePortTemplate body = null;
        Integer id = null;
        ConsolePortTemplate response = api.apiDcimConsolePortTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortsCreateTest() throws ApiException {
        WritableConsolePort body = null;
        ConsolePort response = api.apiDcimConsolePortsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimConsolePortsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimConsolePortsList(name, connectionStatus, deviceId, device, tag, cabled, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortsPartialUpdateTest() throws ApiException {
        WritableConsolePort body = null;
        Integer id = null;
        ConsolePort response = api.apiDcimConsolePortsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortsReadTest() throws ApiException {
        Integer id = null;
        ConsolePort response = api.apiDcimConsolePortsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortsTraceTest() throws ApiException {
        Integer id = null;
        ConsolePort response = api.apiDcimConsolePortsTrace(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsolePortsUpdateTest() throws ApiException {
        WritableConsolePort body = null;
        Integer id = null;
        ConsolePort response = api.apiDcimConsolePortsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortTemplatesCreateTest() throws ApiException {
        WritableConsoleServerPortTemplate body = null;
        ConsoleServerPortTemplate response = api.apiDcimConsoleServerPortTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimConsoleServerPortTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimConsoleServerPortTemplatesList(name, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortTemplatesPartialUpdateTest() throws ApiException {
        WritableConsoleServerPortTemplate body = null;
        Integer id = null;
        ConsoleServerPortTemplate response = api.apiDcimConsoleServerPortTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        ConsoleServerPortTemplate response = api.apiDcimConsoleServerPortTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortTemplatesUpdateTest() throws ApiException {
        WritableConsoleServerPortTemplate body = null;
        Integer id = null;
        ConsoleServerPortTemplate response = api.apiDcimConsoleServerPortTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortsCreateTest() throws ApiException {
        WritableConsoleServerPort body = null;
        ConsoleServerPort response = api.apiDcimConsoleServerPortsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimConsoleServerPortsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimConsoleServerPortsList(name, connectionStatus, deviceId, device, tag, cabled, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortsPartialUpdateTest() throws ApiException {
        WritableConsoleServerPort body = null;
        Integer id = null;
        ConsoleServerPort response = api.apiDcimConsoleServerPortsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortsReadTest() throws ApiException {
        Integer id = null;
        ConsoleServerPort response = api.apiDcimConsoleServerPortsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortsTraceTest() throws ApiException {
        Integer id = null;
        ConsoleServerPort response = api.apiDcimConsoleServerPortsTrace(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimConsoleServerPortsUpdateTest() throws ApiException {
        WritableConsoleServerPort body = null;
        Integer id = null;
        ConsoleServerPort response = api.apiDcimConsoleServerPortsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBayTemplatesCreateTest() throws ApiException {
        WritableDeviceBayTemplate body = null;
        DeviceBayTemplate response = api.apiDcimDeviceBayTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBayTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimDeviceBayTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBayTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimDeviceBayTemplatesList(name, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBayTemplatesPartialUpdateTest() throws ApiException {
        WritableDeviceBayTemplate body = null;
        Integer id = null;
        DeviceBayTemplate response = api.apiDcimDeviceBayTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBayTemplatesReadTest() throws ApiException {
        Integer id = null;
        DeviceBayTemplate response = api.apiDcimDeviceBayTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBayTemplatesUpdateTest() throws ApiException {
        WritableDeviceBayTemplate body = null;
        Integer id = null;
        DeviceBayTemplate response = api.apiDcimDeviceBayTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBaysCreateTest() throws ApiException {
        WritableDeviceBay body = null;
        DeviceBay response = api.apiDcimDeviceBaysCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBaysDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimDeviceBaysDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBaysListTest() throws ApiException {
        String name = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimDeviceBaysList(name, deviceId, device, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBaysPartialUpdateTest() throws ApiException {
        WritableDeviceBay body = null;
        Integer id = null;
        DeviceBay response = api.apiDcimDeviceBaysPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBaysReadTest() throws ApiException {
        Integer id = null;
        DeviceBay response = api.apiDcimDeviceBaysRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceBaysUpdateTest() throws ApiException {
        WritableDeviceBay body = null;
        Integer id = null;
        DeviceBay response = api.apiDcimDeviceBaysUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceRolesCreateTest() throws ApiException {
        DeviceRole body = null;
        DeviceRole response = api.apiDcimDeviceRolesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimDeviceRolesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        String color = null;
        String vmRole = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimDeviceRolesList(name, slug, color, vmRole, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceRolesPartialUpdateTest() throws ApiException {
        DeviceRole body = null;
        Integer id = null;
        DeviceRole response = api.apiDcimDeviceRolesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceRolesReadTest() throws ApiException {
        Integer id = null;
        DeviceRole response = api.apiDcimDeviceRolesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceRolesUpdateTest() throws ApiException {
        DeviceRole body = null;
        Integer id = null;
        DeviceRole response = api.apiDcimDeviceRolesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceTypesCreateTest() throws ApiException {
        WritableDeviceType body = null;
        DeviceType response = api.apiDcimDeviceTypesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimDeviceTypesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceTypesListTest() throws ApiException {
        String model = null;
        String slug = null;
        String partNumber = null;
        BigDecimal uHeight = null;
        String isFullDepth = null;
        String subdeviceRole = null;
        String idIn = null;
        String q = null;
        String manufacturerId = null;
        String manufacturer = null;
        String consolePorts = null;
        String consoleServerPorts = null;
        String powerPorts = null;
        String powerOutlets = null;
        String interfaces = null;
        String passThroughPorts = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimDeviceTypesList(model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, idIn, q, manufacturerId, manufacturer, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceTypesPartialUpdateTest() throws ApiException {
        WritableDeviceType body = null;
        Integer id = null;
        DeviceType response = api.apiDcimDeviceTypesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceTypesReadTest() throws ApiException {
        Integer id = null;
        DeviceType response = api.apiDcimDeviceTypesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDeviceTypesUpdateTest() throws ApiException {
        WritableDeviceType body = null;
        Integer id = null;
        DeviceType response = api.apiDcimDeviceTypesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDevicesCreateTest() throws ApiException {
        WritableDevice body = null;
        Device response = api.apiDcimDevicesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDevicesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimDevicesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDevicesListTest() throws ApiException {
        String serial = null;
        BigDecimal position = null;
        String idIn = null;
        String q = null;
        String manufacturerId = null;
        String manufacturer = null;
        String deviceTypeId = null;
        String roleId = null;
        String role = null;
        String tenantId = null;
        String tenant = null;
        String platformId = null;
        String platform = null;
        String name = null;
        String assetTag = null;
        BigDecimal regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String rackGroupId = null;
        String rackId = null;
        String clusterId = null;
        String model = null;
        String status = null;
        String isFullDepth = null;
        String macAddress = null;
        String hasPrimaryIp = null;
        String virtualChassisId = null;
        String consolePorts = null;
        String consoleServerPorts = null;
        String powerPorts = null;
        String powerOutlets = null;
        String interfaces = null;
        String passThroughPorts = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimDevicesList(serial, position, idIn, q, manufacturerId, manufacturer, deviceTypeId, roleId, role, tenantId, tenant, platformId, platform, name, assetTag, regionId, region, siteId, site, rackGroupId, rackId, clusterId, model, status, isFullDepth, macAddress, hasPrimaryIp, virtualChassisId, consolePorts, consoleServerPorts, powerPorts, powerOutlets, interfaces, passThroughPorts, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * Execute a NAPALM method on a Device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDevicesNapalmTest() throws ApiException {
        Integer id = null;
        Device response = api.apiDcimDevicesNapalm(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDevicesPartialUpdateTest() throws ApiException {
        WritableDevice body = null;
        Integer id = null;
        Device response = api.apiDcimDevicesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDevicesReadTest() throws ApiException {
        Integer id = null;
        DeviceWithConfigContext response = api.apiDcimDevicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimDevicesUpdateTest() throws ApiException {
        WritableDevice body = null;
        Integer id = null;
        Device response = api.apiDcimDevicesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortTemplatesCreateTest() throws ApiException {
        WritableFrontPortTemplate body = null;
        FrontPortTemplate response = api.apiDcimFrontPortTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimFrontPortTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortTemplatesListTest() throws ApiException {
        String name = null;
        String type = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimFrontPortTemplatesList(name, type, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortTemplatesPartialUpdateTest() throws ApiException {
        WritableFrontPortTemplate body = null;
        Integer id = null;
        FrontPortTemplate response = api.apiDcimFrontPortTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        FrontPortTemplate response = api.apiDcimFrontPortTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortTemplatesUpdateTest() throws ApiException {
        WritableFrontPortTemplate body = null;
        Integer id = null;
        FrontPortTemplate response = api.apiDcimFrontPortTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortsCreateTest() throws ApiException {
        WritableFrontPort body = null;
        FrontPort response = api.apiDcimFrontPortsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimFrontPortsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortsListTest() throws ApiException {
        String name = null;
        String type = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimFrontPortsList(name, type, deviceId, device, tag, cabled, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortsPartialUpdateTest() throws ApiException {
        WritableFrontPort body = null;
        Integer id = null;
        FrontPort response = api.apiDcimFrontPortsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortsReadTest() throws ApiException {
        Integer id = null;
        FrontPort response = api.apiDcimFrontPortsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimFrontPortsUpdateTest() throws ApiException {
        WritableFrontPort body = null;
        Integer id = null;
        FrontPort response = api.apiDcimFrontPortsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfaceConnectionsListTest() throws ApiException {
        String connectionStatus = null;
        String site = null;
        String device = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimInterfaceConnectionsList(connectionStatus, site, device, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfaceTemplatesCreateTest() throws ApiException {
        WritableInterfaceTemplate body = null;
        InterfaceTemplate response = api.apiDcimInterfaceTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfaceTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimInterfaceTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfaceTemplatesListTest() throws ApiException {
        String name = null;
        String formFactor = null;
        String mgmtOnly = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimInterfaceTemplatesList(name, formFactor, mgmtOnly, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfaceTemplatesPartialUpdateTest() throws ApiException {
        WritableInterfaceTemplate body = null;
        Integer id = null;
        InterfaceTemplate response = api.apiDcimInterfaceTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfaceTemplatesReadTest() throws ApiException {
        Integer id = null;
        InterfaceTemplate response = api.apiDcimInterfaceTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfaceTemplatesUpdateTest() throws ApiException {
        WritableInterfaceTemplate body = null;
        Integer id = null;
        InterfaceTemplate response = api.apiDcimInterfaceTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesCreateTest() throws ApiException {
        WritableInterface body = null;
        ModelInterface response = api.apiDcimInterfacesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimInterfacesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * A convenience method for rendering graphs for a particular interface.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesGraphsTest() throws ApiException {
        Integer id = null;
        ModelInterface response = api.apiDcimInterfacesGraphs(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String formFactor = null;
        String enabled = null;
        BigDecimal mtu = null;
        String mgmtOnly = null;
        String q = null;
        String device = null;
        BigDecimal deviceId = null;
        String cabled = null;
        String type = null;
        String lagId = null;
        String macAddress = null;
        String tag = null;
        String vlanId = null;
        String vlan = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimInterfacesList(name, connectionStatus, formFactor, enabled, mtu, mgmtOnly, q, device, deviceId, cabled, type, lagId, macAddress, tag, vlanId, vlan, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesPartialUpdateTest() throws ApiException {
        WritableInterface body = null;
        Integer id = null;
        ModelInterface response = api.apiDcimInterfacesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesReadTest() throws ApiException {
        Integer id = null;
        ModelInterface response = api.apiDcimInterfacesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesTraceTest() throws ApiException {
        Integer id = null;
        ModelInterface response = api.apiDcimInterfacesTrace(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInterfacesUpdateTest() throws ApiException {
        WritableInterface body = null;
        Integer id = null;
        ModelInterface response = api.apiDcimInterfacesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInventoryItemsCreateTest() throws ApiException {
        WritableInventoryItem body = null;
        InventoryItem response = api.apiDcimInventoryItemsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInventoryItemsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimInventoryItemsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInventoryItemsListTest() throws ApiException {
        String name = null;
        String partId = null;
        String serial = null;
        String assetTag = null;
        String discovered = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String q = null;
        String parentId = null;
        String manufacturerId = null;
        String manufacturer = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimInventoryItemsList(name, partId, serial, assetTag, discovered, deviceId, device, tag, q, parentId, manufacturerId, manufacturer, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInventoryItemsPartialUpdateTest() throws ApiException {
        WritableInventoryItem body = null;
        Integer id = null;
        InventoryItem response = api.apiDcimInventoryItemsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInventoryItemsReadTest() throws ApiException {
        Integer id = null;
        InventoryItem response = api.apiDcimInventoryItemsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimInventoryItemsUpdateTest() throws ApiException {
        WritableInventoryItem body = null;
        Integer id = null;
        InventoryItem response = api.apiDcimInventoryItemsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimManufacturersCreateTest() throws ApiException {
        Manufacturer body = null;
        Manufacturer response = api.apiDcimManufacturersCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimManufacturersDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimManufacturersDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimManufacturersListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimManufacturersList(name, slug, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimManufacturersPartialUpdateTest() throws ApiException {
        Manufacturer body = null;
        Integer id = null;
        Manufacturer response = api.apiDcimManufacturersPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimManufacturersReadTest() throws ApiException {
        Integer id = null;
        Manufacturer response = api.apiDcimManufacturersRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimManufacturersUpdateTest() throws ApiException {
        Manufacturer body = null;
        Integer id = null;
        Manufacturer response = api.apiDcimManufacturersUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPlatformsCreateTest() throws ApiException {
        WritablePlatform body = null;
        Platform response = api.apiDcimPlatformsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPlatformsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimPlatformsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPlatformsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String manufacturerId = null;
        String manufacturer = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimPlatformsList(name, slug, manufacturerId, manufacturer, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPlatformsPartialUpdateTest() throws ApiException {
        WritablePlatform body = null;
        Integer id = null;
        Platform response = api.apiDcimPlatformsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPlatformsReadTest() throws ApiException {
        Integer id = null;
        Platform response = api.apiDcimPlatformsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPlatformsUpdateTest() throws ApiException {
        WritablePlatform body = null;
        Integer id = null;
        Platform response = api.apiDcimPlatformsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerConnectionsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String site = null;
        String device = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimPowerConnectionsList(name, connectionStatus, site, device, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletTemplatesCreateTest() throws ApiException {
        WritablePowerOutletTemplate body = null;
        PowerOutletTemplate response = api.apiDcimPowerOutletTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimPowerOutletTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimPowerOutletTemplatesList(name, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletTemplatesPartialUpdateTest() throws ApiException {
        WritablePowerOutletTemplate body = null;
        Integer id = null;
        PowerOutletTemplate response = api.apiDcimPowerOutletTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletTemplatesReadTest() throws ApiException {
        Integer id = null;
        PowerOutletTemplate response = api.apiDcimPowerOutletTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletTemplatesUpdateTest() throws ApiException {
        WritablePowerOutletTemplate body = null;
        Integer id = null;
        PowerOutletTemplate response = api.apiDcimPowerOutletTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletsCreateTest() throws ApiException {
        WritablePowerOutlet body = null;
        PowerOutlet response = api.apiDcimPowerOutletsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimPowerOutletsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimPowerOutletsList(name, connectionStatus, deviceId, device, tag, cabled, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletsPartialUpdateTest() throws ApiException {
        WritablePowerOutlet body = null;
        Integer id = null;
        PowerOutlet response = api.apiDcimPowerOutletsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletsReadTest() throws ApiException {
        Integer id = null;
        PowerOutlet response = api.apiDcimPowerOutletsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletsTraceTest() throws ApiException {
        Integer id = null;
        PowerOutlet response = api.apiDcimPowerOutletsTrace(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerOutletsUpdateTest() throws ApiException {
        WritablePowerOutlet body = null;
        Integer id = null;
        PowerOutlet response = api.apiDcimPowerOutletsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortTemplatesCreateTest() throws ApiException {
        WritablePowerPortTemplate body = null;
        PowerPortTemplate response = api.apiDcimPowerPortTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimPowerPortTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortTemplatesListTest() throws ApiException {
        String name = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimPowerPortTemplatesList(name, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortTemplatesPartialUpdateTest() throws ApiException {
        WritablePowerPortTemplate body = null;
        Integer id = null;
        PowerPortTemplate response = api.apiDcimPowerPortTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        PowerPortTemplate response = api.apiDcimPowerPortTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortTemplatesUpdateTest() throws ApiException {
        WritablePowerPortTemplate body = null;
        Integer id = null;
        PowerPortTemplate response = api.apiDcimPowerPortTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortsCreateTest() throws ApiException {
        WritablePowerPort body = null;
        PowerPort response = api.apiDcimPowerPortsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimPowerPortsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortsListTest() throws ApiException {
        String name = null;
        String connectionStatus = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimPowerPortsList(name, connectionStatus, deviceId, device, tag, cabled, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortsPartialUpdateTest() throws ApiException {
        WritablePowerPort body = null;
        Integer id = null;
        PowerPort response = api.apiDcimPowerPortsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortsReadTest() throws ApiException {
        Integer id = null;
        PowerPort response = api.apiDcimPowerPortsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortsTraceTest() throws ApiException {
        Integer id = null;
        PowerPort response = api.apiDcimPowerPortsTrace(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimPowerPortsUpdateTest() throws ApiException {
        WritablePowerPort body = null;
        Integer id = null;
        PowerPort response = api.apiDcimPowerPortsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackGroupsCreateTest() throws ApiException {
        WritableRackGroup body = null;
        RackGroup response = api.apiDcimRackGroupsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimRackGroupsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackGroupsListTest() throws ApiException {
        String siteId = null;
        String name = null;
        String slug = null;
        String q = null;
        String site = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimRackGroupsList(siteId, name, slug, q, site, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackGroupsPartialUpdateTest() throws ApiException {
        WritableRackGroup body = null;
        Integer id = null;
        RackGroup response = api.apiDcimRackGroupsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackGroupsReadTest() throws ApiException {
        Integer id = null;
        RackGroup response = api.apiDcimRackGroupsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackGroupsUpdateTest() throws ApiException {
        WritableRackGroup body = null;
        Integer id = null;
        RackGroup response = api.apiDcimRackGroupsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackReservationsCreateTest() throws ApiException {
        WritableRackReservation body = null;
        RackReservation response = api.apiDcimRackReservationsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackReservationsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimRackReservationsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackReservationsListTest() throws ApiException {
        String created = null;
        String idIn = null;
        String q = null;
        String rackId = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String tenantId = null;
        String tenant = null;
        String userId = null;
        String user = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimRackReservationsList(created, idIn, q, rackId, siteId, site, groupId, group, tenantId, tenant, userId, user, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackReservationsPartialUpdateTest() throws ApiException {
        WritableRackReservation body = null;
        Integer id = null;
        RackReservation response = api.apiDcimRackReservationsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackReservationsReadTest() throws ApiException {
        Integer id = null;
        RackReservation response = api.apiDcimRackReservationsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackReservationsUpdateTest() throws ApiException {
        WritableRackReservation body = null;
        Integer id = null;
        RackReservation response = api.apiDcimRackReservationsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackRolesCreateTest() throws ApiException {
        RackRole body = null;
        RackRole response = api.apiDcimRackRolesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimRackRolesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        String color = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimRackRolesList(name, slug, color, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackRolesPartialUpdateTest() throws ApiException {
        RackRole body = null;
        Integer id = null;
        RackRole response = api.apiDcimRackRolesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackRolesReadTest() throws ApiException {
        Integer id = null;
        RackRole response = api.apiDcimRackRolesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRackRolesUpdateTest() throws ApiException {
        RackRole body = null;
        Integer id = null;
        RackRole response = api.apiDcimRackRolesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRacksCreateTest() throws ApiException {
        WritableRack body = null;
        Rack response = api.apiDcimRacksCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRacksDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimRacksDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRacksListTest() throws ApiException {
        String name = null;
        String serial = null;
        String assetTag = null;
        String type = null;
        String width = null;
        BigDecimal uHeight = null;
        String descUnits = null;
        BigDecimal outerWidth = null;
        BigDecimal outerDepth = null;
        String outerUnit = null;
        String idIn = null;
        String q = null;
        String facilityId = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String tenantId = null;
        String tenant = null;
        String status = null;
        String roleId = null;
        String role = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimRacksList(name, serial, assetTag, type, width, uHeight, descUnits, outerWidth, outerDepth, outerUnit, idIn, q, facilityId, siteId, site, groupId, group, tenantId, tenant, status, roleId, role, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRacksPartialUpdateTest() throws ApiException {
        WritableRack body = null;
        Integer id = null;
        Rack response = api.apiDcimRacksPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRacksReadTest() throws ApiException {
        Integer id = null;
        Rack response = api.apiDcimRacksRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * List rack units (by rack)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRacksUnitsTest() throws ApiException {
        Integer id = null;
        Rack response = api.apiDcimRacksUnits(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRacksUpdateTest() throws ApiException {
        WritableRack body = null;
        Integer id = null;
        Rack response = api.apiDcimRacksUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortTemplatesCreateTest() throws ApiException {
        WritableRearPortTemplate body = null;
        RearPortTemplate response = api.apiDcimRearPortTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimRearPortTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortTemplatesListTest() throws ApiException {
        String name = null;
        String type = null;
        String devicetypeId = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimRearPortTemplatesList(name, type, devicetypeId, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortTemplatesPartialUpdateTest() throws ApiException {
        WritableRearPortTemplate body = null;
        Integer id = null;
        RearPortTemplate response = api.apiDcimRearPortTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortTemplatesReadTest() throws ApiException {
        Integer id = null;
        RearPortTemplate response = api.apiDcimRearPortTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortTemplatesUpdateTest() throws ApiException {
        WritableRearPortTemplate body = null;
        Integer id = null;
        RearPortTemplate response = api.apiDcimRearPortTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortsCreateTest() throws ApiException {
        WritableRearPort body = null;
        RearPort response = api.apiDcimRearPortsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimRearPortsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortsListTest() throws ApiException {
        String name = null;
        String type = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        String cabled = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimRearPortsList(name, type, deviceId, device, tag, cabled, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortsPartialUpdateTest() throws ApiException {
        WritableRearPort body = null;
        Integer id = null;
        RearPort response = api.apiDcimRearPortsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortsReadTest() throws ApiException {
        Integer id = null;
        RearPort response = api.apiDcimRearPortsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRearPortsUpdateTest() throws ApiException {
        WritableRearPort body = null;
        Integer id = null;
        RearPort response = api.apiDcimRearPortsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRegionsCreateTest() throws ApiException {
        WritableRegion body = null;
        Region response = api.apiDcimRegionsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRegionsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimRegionsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRegionsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String q = null;
        String parentId = null;
        String parent = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimRegionsList(name, slug, q, parentId, parent, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRegionsPartialUpdateTest() throws ApiException {
        WritableRegion body = null;
        Integer id = null;
        Region response = api.apiDcimRegionsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRegionsReadTest() throws ApiException {
        Integer id = null;
        Region response = api.apiDcimRegionsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimRegionsUpdateTest() throws ApiException {
        WritableRegion body = null;
        Integer id = null;
        Region response = api.apiDcimRegionsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimSitesCreateTest() throws ApiException {
        WritableSite body = null;
        Site response = api.apiDcimSitesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimSitesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimSitesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * A convenience method for rendering graphs for a particular site.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimSitesGraphsTest() throws ApiException {
        Integer id = null;
        Site response = api.apiDcimSitesGraphs(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimSitesListTest() throws ApiException {
        String q = null;
        String name = null;
        String slug = null;
        String facility = null;
        BigDecimal asn = null;
        String contactName = null;
        String contactPhone = null;
        String contactEmail = null;
        String idIn = null;
        String status = null;
        BigDecimal regionId = null;
        String region = null;
        String tenantId = null;
        String tenant = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimSitesList(q, name, slug, facility, asn, contactName, contactPhone, contactEmail, idIn, status, regionId, region, tenantId, tenant, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimSitesPartialUpdateTest() throws ApiException {
        WritableSite body = null;
        Integer id = null;
        Site response = api.apiDcimSitesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimSitesReadTest() throws ApiException {
        Integer id = null;
        Site response = api.apiDcimSitesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimSitesUpdateTest() throws ApiException {
        WritableSite body = null;
        Integer id = null;
        Site response = api.apiDcimSitesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimVirtualChassisCreateTest() throws ApiException {
        WritableVirtualChassis body = null;
        VirtualChassis response = api.apiDcimVirtualChassisCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimVirtualChassisDeleteTest() throws ApiException {
        Integer id = null;
        api.apiDcimVirtualChassisDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimVirtualChassisListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiDcimVirtualChassisList(limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimVirtualChassisPartialUpdateTest() throws ApiException {
        WritableVirtualChassis body = null;
        Integer id = null;
        VirtualChassis response = api.apiDcimVirtualChassisPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimVirtualChassisReadTest() throws ApiException {
        Integer id = null;
        VirtualChassis response = api.apiDcimVirtualChassisRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiDcimVirtualChassisUpdateTest() throws ApiException {
        WritableVirtualChassis body = null;
        Integer id = null;
        VirtualChassis response = api.apiDcimVirtualChassisUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasChoicesListTest() throws ApiException {
        api.apiExtrasChoicesList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasChoicesReadTest() throws ApiException {
        String id = null;
        api.apiExtrasChoicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasConfigContextsCreateTest() throws ApiException {
        WritableConfigContext body = null;
        ConfigContext response = api.apiExtrasConfigContextsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasConfigContextsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiExtrasConfigContextsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasConfigContextsListTest() throws ApiException {
        String name = null;
        String isActive = null;
        String q = null;
        String regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String roleId = null;
        String role = null;
        String platformId = null;
        String platform = null;
        String tenantGroupId = null;
        String tenantGroup = null;
        String tenantId = null;
        String tenant = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiExtrasConfigContextsList(name, isActive, q, regionId, region, siteId, site, roleId, role, platformId, platform, tenantGroupId, tenantGroup, tenantId, tenant, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasConfigContextsPartialUpdateTest() throws ApiException {
        WritableConfigContext body = null;
        Integer id = null;
        ConfigContext response = api.apiExtrasConfigContextsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasConfigContextsReadTest() throws ApiException {
        Integer id = null;
        ConfigContext response = api.apiExtrasConfigContextsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasConfigContextsUpdateTest() throws ApiException {
        WritableConfigContext body = null;
        Integer id = null;
        ConfigContext response = api.apiExtrasConfigContextsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasExportTemplatesCreateTest() throws ApiException {
        ExportTemplate body = null;
        ExportTemplate response = api.apiExtrasExportTemplatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasExportTemplatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiExtrasExportTemplatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasExportTemplatesListTest() throws ApiException {
        String contentType = null;
        String name = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiExtrasExportTemplatesList(contentType, name, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasExportTemplatesPartialUpdateTest() throws ApiException {
        ExportTemplate body = null;
        Integer id = null;
        ExportTemplate response = api.apiExtrasExportTemplatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasExportTemplatesReadTest() throws ApiException {
        Integer id = null;
        ExportTemplate response = api.apiExtrasExportTemplatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasExportTemplatesUpdateTest() throws ApiException {
        ExportTemplate body = null;
        Integer id = null;
        ExportTemplate response = api.apiExtrasExportTemplatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasGraphsCreateTest() throws ApiException {
        WritableGraph body = null;
        Graph response = api.apiExtrasGraphsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasGraphsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiExtrasGraphsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasGraphsListTest() throws ApiException {
        String type = null;
        String name = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiExtrasGraphsList(type, name, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasGraphsPartialUpdateTest() throws ApiException {
        WritableGraph body = null;
        Integer id = null;
        Graph response = api.apiExtrasGraphsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasGraphsReadTest() throws ApiException {
        Integer id = null;
        Graph response = api.apiExtrasGraphsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasGraphsUpdateTest() throws ApiException {
        WritableGraph body = null;
        Integer id = null;
        Graph response = api.apiExtrasGraphsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasImageAttachmentsCreateTest() throws ApiException {
        ImageAttachment body = null;
        ImageAttachment response = api.apiExtrasImageAttachmentsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasImageAttachmentsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiExtrasImageAttachmentsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasImageAttachmentsListTest() throws ApiException {
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiExtrasImageAttachmentsList(limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasImageAttachmentsPartialUpdateTest() throws ApiException {
        ImageAttachment body = null;
        Integer id = null;
        ImageAttachment response = api.apiExtrasImageAttachmentsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasImageAttachmentsReadTest() throws ApiException {
        Integer id = null;
        ImageAttachment response = api.apiExtrasImageAttachmentsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasImageAttachmentsUpdateTest() throws ApiException {
        ImageAttachment body = null;
        Integer id = null;
        ImageAttachment response = api.apiExtrasImageAttachmentsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a list of recent changes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasObjectChangesListTest() throws ApiException {
        String user = null;
        String userName = null;
        String requestId = null;
        String action = null;
        String changedObjectType = null;
        String objectRepr = null;
        String q = null;
        String time = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiExtrasObjectChangesList(user, userName, requestId, action, changedObjectType, objectRepr, q, time, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a list of recent changes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasObjectChangesReadTest() throws ApiException {
        Integer id = null;
        ObjectChange response = api.apiExtrasObjectChangesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Compile all reports and their related results (if any). Result data is deferred in the list view.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasReportsListTest() throws ApiException {
        api.apiExtrasReportsList();

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a single Report identified as \&quot;&lt;module&gt;.&lt;report&gt;\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasReportsReadTest() throws ApiException {
        String id = null;
        api.apiExtrasReportsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * Run a Report and create a new ReportResult, overwriting any previous result for the Report.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasReportsRunTest() throws ApiException {
        String id = null;
        api.apiExtrasReportsRun(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTagsCreateTest() throws ApiException {
        Tag body = null;
        Tag response = api.apiExtrasTagsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTagsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiExtrasTagsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTagsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String q = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiExtrasTagsList(name, slug, q, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTagsPartialUpdateTest() throws ApiException {
        Tag body = null;
        Integer id = null;
        Tag response = api.apiExtrasTagsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTagsReadTest() throws ApiException {
        Integer id = null;
        Tag response = api.apiExtrasTagsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTagsUpdateTest() throws ApiException {
        Tag body = null;
        Integer id = null;
        Tag response = api.apiExtrasTagsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTopologyMapsCreateTest() throws ApiException {
        WritableTopologyMap body = null;
        TopologyMap response = api.apiExtrasTopologyMapsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTopologyMapsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiExtrasTopologyMapsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTopologyMapsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String siteId = null;
        String site = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiExtrasTopologyMapsList(name, slug, siteId, site, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTopologyMapsPartialUpdateTest() throws ApiException {
        WritableTopologyMap body = null;
        Integer id = null;
        TopologyMap response = api.apiExtrasTopologyMapsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTopologyMapsReadTest() throws ApiException {
        Integer id = null;
        TopologyMap response = api.apiExtrasTopologyMapsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTopologyMapsRenderTest() throws ApiException {
        Integer id = null;
        TopologyMap response = api.apiExtrasTopologyMapsRender(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiExtrasTopologyMapsUpdateTest() throws ApiException {
        WritableTopologyMap body = null;
        Integer id = null;
        TopologyMap response = api.apiExtrasTopologyMapsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamAggregatesCreateTest() throws ApiException {
        WritableAggregate body = null;
        Aggregate response = api.apiIpamAggregatesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamAggregatesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamAggregatesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamAggregatesListTest() throws ApiException {
        String family = null;
        String dateAdded = null;
        String idIn = null;
        String q = null;
        String rirId = null;
        String rir = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamAggregatesList(family, dateAdded, idIn, q, rirId, rir, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamAggregatesPartialUpdateTest() throws ApiException {
        WritableAggregate body = null;
        Integer id = null;
        Aggregate response = api.apiIpamAggregatesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamAggregatesReadTest() throws ApiException {
        Integer id = null;
        Aggregate response = api.apiIpamAggregatesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamAggregatesUpdateTest() throws ApiException {
        WritableAggregate body = null;
        Integer id = null;
        Aggregate response = api.apiIpamAggregatesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamChoicesListTest() throws ApiException {
        api.apiIpamChoicesList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamChoicesReadTest() throws ApiException {
        String id = null;
        api.apiIpamChoicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamIpAddressesCreateTest() throws ApiException {
        WritableIPAddress body = null;
        IPAddress response = api.apiIpamIpAddressesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamIpAddressesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamIpAddressesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamIpAddressesListTest() throws ApiException {
        String family = null;
        String idIn = null;
        String q = null;
        String parent = null;
        String address = null;
        BigDecimal maskLength = null;
        String vrfId = null;
        String vrf = null;
        String tenantId = null;
        String tenant = null;
        String device = null;
        BigDecimal deviceId = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String interfaceId = null;
        String status = null;
        String role = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamIpAddressesList(family, idIn, q, parent, address, maskLength, vrfId, vrf, tenantId, tenant, device, deviceId, virtualMachineId, virtualMachine, interfaceId, status, role, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamIpAddressesPartialUpdateTest() throws ApiException {
        WritableIPAddress body = null;
        Integer id = null;
        IPAddress response = api.apiIpamIpAddressesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamIpAddressesReadTest() throws ApiException {
        Integer id = null;
        IPAddress response = api.apiIpamIpAddressesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamIpAddressesUpdateTest() throws ApiException {
        WritableIPAddress body = null;
        Integer id = null;
        IPAddress response = api.apiIpamIpAddressesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesAvailableIpsCreateTest() throws ApiException {
        WritablePrefix body = null;
        Integer id = null;
        Prefix response = api.apiIpamPrefixesAvailableIpsCreate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * A convenience method for returning available IP addresses within a prefix. By default, the number of IPs returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed, however results will not be paginated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesAvailableIpsReadTest() throws ApiException {
        Integer id = null;
        Prefix response = api.apiIpamPrefixesAvailableIpsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * A convenience method for returning available child prefixes within a parent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesAvailablePrefixesCreateTest() throws ApiException {
        WritablePrefix body = null;
        Integer id = null;
        Prefix response = api.apiIpamPrefixesAvailablePrefixesCreate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * A convenience method for returning available child prefixes within a parent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesAvailablePrefixesReadTest() throws ApiException {
        Integer id = null;
        Prefix response = api.apiIpamPrefixesAvailablePrefixesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesCreateTest() throws ApiException {
        WritablePrefix body = null;
        Prefix response = api.apiIpamPrefixesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamPrefixesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesListTest() throws ApiException {
        String family = null;
        String isPool = null;
        String idIn = null;
        String q = null;
        String prefix = null;
        String within = null;
        String withinInclude = null;
        String contains = null;
        BigDecimal maskLength = null;
        String vrfId = null;
        String vrf = null;
        String tenantId = null;
        String tenant = null;
        String siteId = null;
        String site = null;
        String vlanId = null;
        BigDecimal vlanVid = null;
        String roleId = null;
        String role = null;
        String status = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamPrefixesList(family, isPool, idIn, q, prefix, within, withinInclude, contains, maskLength, vrfId, vrf, tenantId, tenant, siteId, site, vlanId, vlanVid, roleId, role, status, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesPartialUpdateTest() throws ApiException {
        WritablePrefix body = null;
        Integer id = null;
        Prefix response = api.apiIpamPrefixesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesReadTest() throws ApiException {
        Integer id = null;
        Prefix response = api.apiIpamPrefixesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamPrefixesUpdateTest() throws ApiException {
        WritablePrefix body = null;
        Integer id = null;
        Prefix response = api.apiIpamPrefixesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRirsCreateTest() throws ApiException {
        RIR body = null;
        RIR response = api.apiIpamRirsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRirsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamRirsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRirsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String isPrivate = null;
        String idIn = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamRirsList(name, slug, isPrivate, idIn, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRirsPartialUpdateTest() throws ApiException {
        RIR body = null;
        Integer id = null;
        RIR response = api.apiIpamRirsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRirsReadTest() throws ApiException {
        Integer id = null;
        RIR response = api.apiIpamRirsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRirsUpdateTest() throws ApiException {
        RIR body = null;
        Integer id = null;
        RIR response = api.apiIpamRirsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRolesCreateTest() throws ApiException {
        Role body = null;
        Role response = api.apiIpamRolesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamRolesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamRolesList(name, slug, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRolesPartialUpdateTest() throws ApiException {
        Role body = null;
        Integer id = null;
        Role response = api.apiIpamRolesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRolesReadTest() throws ApiException {
        Integer id = null;
        Role response = api.apiIpamRolesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamRolesUpdateTest() throws ApiException {
        Role body = null;
        Integer id = null;
        Role response = api.apiIpamRolesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamServicesCreateTest() throws ApiException {
        WritableService body = null;
        Service response = api.apiIpamServicesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamServicesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamServicesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamServicesListTest() throws ApiException {
        String name = null;
        String protocol = null;
        BigDecimal port = null;
        String q = null;
        String deviceId = null;
        String device = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamServicesList(name, protocol, port, q, deviceId, device, virtualMachineId, virtualMachine, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamServicesPartialUpdateTest() throws ApiException {
        WritableService body = null;
        Integer id = null;
        Service response = api.apiIpamServicesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamServicesReadTest() throws ApiException {
        Integer id = null;
        Service response = api.apiIpamServicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamServicesUpdateTest() throws ApiException {
        WritableService body = null;
        Integer id = null;
        Service response = api.apiIpamServicesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlanGroupsCreateTest() throws ApiException {
        WritableVLANGroup body = null;
        VLANGroup response = api.apiIpamVlanGroupsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlanGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamVlanGroupsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlanGroupsListTest() throws ApiException {
        String name = null;
        String slug = null;
        String siteId = null;
        String site = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamVlanGroupsList(name, slug, siteId, site, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlanGroupsPartialUpdateTest() throws ApiException {
        WritableVLANGroup body = null;
        Integer id = null;
        VLANGroup response = api.apiIpamVlanGroupsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlanGroupsReadTest() throws ApiException {
        Integer id = null;
        VLANGroup response = api.apiIpamVlanGroupsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlanGroupsUpdateTest() throws ApiException {
        WritableVLANGroup body = null;
        Integer id = null;
        VLANGroup response = api.apiIpamVlanGroupsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlansCreateTest() throws ApiException {
        WritableVLAN body = null;
        VLAN response = api.apiIpamVlansCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlansDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamVlansDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlansListTest() throws ApiException {
        BigDecimal vid = null;
        String name = null;
        String idIn = null;
        String q = null;
        String siteId = null;
        String site = null;
        String groupId = null;
        String group = null;
        String tenantId = null;
        String tenant = null;
        String roleId = null;
        String role = null;
        String status = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamVlansList(vid, name, idIn, q, siteId, site, groupId, group, tenantId, tenant, roleId, role, status, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlansPartialUpdateTest() throws ApiException {
        WritableVLAN body = null;
        Integer id = null;
        VLAN response = api.apiIpamVlansPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlansReadTest() throws ApiException {
        Integer id = null;
        VLAN response = api.apiIpamVlansRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVlansUpdateTest() throws ApiException {
        WritableVLAN body = null;
        Integer id = null;
        VLAN response = api.apiIpamVlansUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVrfsCreateTest() throws ApiException {
        WritableVRF body = null;
        VRF response = api.apiIpamVrfsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVrfsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiIpamVrfsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVrfsListTest() throws ApiException {
        String name = null;
        String rd = null;
        String enforceUnique = null;
        String idIn = null;
        String q = null;
        String tenantId = null;
        String tenant = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiIpamVrfsList(name, rd, enforceUnique, idIn, q, tenantId, tenant, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVrfsPartialUpdateTest() throws ApiException {
        WritableVRF body = null;
        Integer id = null;
        VRF response = api.apiIpamVrfsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVrfsReadTest() throws ApiException {
        Integer id = null;
        VRF response = api.apiIpamVrfsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiIpamVrfsUpdateTest() throws ApiException {
        WritableVRF body = null;
        Integer id = null;
        VRF response = api.apiIpamVrfsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiListTest() throws ApiException {
        api.apiList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsChoicesListTest() throws ApiException {
        api.apiSecretsChoicesList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsChoicesReadTest() throws ApiException {
        String id = null;
        api.apiSecretsChoicesRead(id);

        // TODO: test validations
    }
    /**
     * This endpoint can be used to generate a new RSA key pair. The keys are returned in PEM format.
     *
     *     {         \&quot;public_key\&quot;: \&quot;&lt;public key&gt;\&quot;,         \&quot;private_key\&quot;: \&quot;&lt;private key&gt;\&quot;     }
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsGenerateRsaKeyPairListTest() throws ApiException {
        api.apiSecretsGenerateRsaKeyPairList();

        // TODO: test validations
    }
    /**
     * 
     *
     * Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user&#x27;s private RSA key is POSTed with the name &#x60;private_key&#x60;. An example:      curl -v -X POST -H \&quot;Authorization: Token &lt;token&gt;\&quot; -H \&quot;Accept: application/json; indent&#x3D;4\&quot; \\     --data-urlencode \&quot;private_key@&lt;filename&gt;\&quot; https://netbox/api/secrets/get-session-key/  This request will yield a base64-encoded session key to be included in an &#x60;X-Session-Key&#x60; header in future requests:      {         \&quot;session_key\&quot;: \&quot;+8t4SI6XikgVmB5+/urhozx9O5qCQANyOk1MNe6taRf&#x3D;\&quot;     }  This endpoint accepts one optional parameter: &#x60;preserve_key&#x60;. If True and a session key exists, the existing session key will be returned instead of a new one.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsGetSessionKeyCreateTest() throws ApiException {
        api.apiSecretsGetSessionKeyCreate();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretRolesCreateTest() throws ApiException {
        SecretRole body = null;
        SecretRole response = api.apiSecretsSecretRolesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretRolesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiSecretsSecretRolesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretRolesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiSecretsSecretRolesList(name, slug, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretRolesPartialUpdateTest() throws ApiException {
        SecretRole body = null;
        Integer id = null;
        SecretRole response = api.apiSecretsSecretRolesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretRolesReadTest() throws ApiException {
        Integer id = null;
        SecretRole response = api.apiSecretsSecretRolesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretRolesUpdateTest() throws ApiException {
        SecretRole body = null;
        Integer id = null;
        SecretRole response = api.apiSecretsSecretRolesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretsCreateTest() throws ApiException {
        WritableSecret body = null;
        Secret response = api.apiSecretsSecretsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiSecretsSecretsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretsListTest() throws ApiException {
        String name = null;
        String idIn = null;
        String q = null;
        String roleId = null;
        String role = null;
        String deviceId = null;
        String device = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiSecretsSecretsList(name, idIn, q, roleId, role, deviceId, device, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretsPartialUpdateTest() throws ApiException {
        WritableSecret body = null;
        Integer id = null;
        Secret response = api.apiSecretsSecretsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretsReadTest() throws ApiException {
        Integer id = null;
        Secret response = api.apiSecretsSecretsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiSecretsSecretsUpdateTest() throws ApiException {
        WritableSecret body = null;
        Integer id = null;
        Secret response = api.apiSecretsSecretsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyChoicesListTest() throws ApiException {
        api.apiTenancyChoicesList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyChoicesReadTest() throws ApiException {
        String id = null;
        api.apiTenancyChoicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantGroupsCreateTest() throws ApiException {
        TenantGroup body = null;
        TenantGroup response = api.apiTenancyTenantGroupsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiTenancyTenantGroupsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantGroupsListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiTenancyTenantGroupsList(name, slug, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantGroupsPartialUpdateTest() throws ApiException {
        TenantGroup body = null;
        Integer id = null;
        TenantGroup response = api.apiTenancyTenantGroupsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantGroupsReadTest() throws ApiException {
        Integer id = null;
        TenantGroup response = api.apiTenancyTenantGroupsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantGroupsUpdateTest() throws ApiException {
        TenantGroup body = null;
        Integer id = null;
        TenantGroup response = api.apiTenancyTenantGroupsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantsCreateTest() throws ApiException {
        WritableTenant body = null;
        Tenant response = api.apiTenancyTenantsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiTenancyTenantsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantsListTest() throws ApiException {
        String name = null;
        String idIn = null;
        String q = null;
        String groupId = null;
        String group = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiTenancyTenantsList(name, idIn, q, groupId, group, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantsPartialUpdateTest() throws ApiException {
        WritableTenant body = null;
        Integer id = null;
        Tenant response = api.apiTenancyTenantsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantsReadTest() throws ApiException {
        Integer id = null;
        Tenant response = api.apiTenancyTenantsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiTenancyTenantsUpdateTest() throws ApiException {
        WritableTenant body = null;
        Integer id = null;
        Tenant response = api.apiTenancyTenantsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationChoicesListTest() throws ApiException {
        api.apiVirtualizationChoicesList();

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationChoicesReadTest() throws ApiException {
        String id = null;
        api.apiVirtualizationChoicesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterGroupsCreateTest() throws ApiException {
        ClusterGroup body = null;
        ClusterGroup response = api.apiVirtualizationClusterGroupsCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterGroupsDeleteTest() throws ApiException {
        Integer id = null;
        api.apiVirtualizationClusterGroupsDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterGroupsListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiVirtualizationClusterGroupsList(name, slug, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterGroupsPartialUpdateTest() throws ApiException {
        ClusterGroup body = null;
        Integer id = null;
        ClusterGroup response = api.apiVirtualizationClusterGroupsPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterGroupsReadTest() throws ApiException {
        Integer id = null;
        ClusterGroup response = api.apiVirtualizationClusterGroupsRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterGroupsUpdateTest() throws ApiException {
        ClusterGroup body = null;
        Integer id = null;
        ClusterGroup response = api.apiVirtualizationClusterGroupsUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterTypesCreateTest() throws ApiException {
        ClusterType body = null;
        ClusterType response = api.apiVirtualizationClusterTypesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterTypesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiVirtualizationClusterTypesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterTypesListTest() throws ApiException {
        String name = null;
        String slug = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiVirtualizationClusterTypesList(name, slug, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterTypesPartialUpdateTest() throws ApiException {
        ClusterType body = null;
        Integer id = null;
        ClusterType response = api.apiVirtualizationClusterTypesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterTypesReadTest() throws ApiException {
        Integer id = null;
        ClusterType response = api.apiVirtualizationClusterTypesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClusterTypesUpdateTest() throws ApiException {
        ClusterType body = null;
        Integer id = null;
        ClusterType response = api.apiVirtualizationClusterTypesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClustersCreateTest() throws ApiException {
        WritableCluster body = null;
        Cluster response = api.apiVirtualizationClustersCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClustersDeleteTest() throws ApiException {
        Integer id = null;
        api.apiVirtualizationClustersDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClustersListTest() throws ApiException {
        String name = null;
        String idIn = null;
        String q = null;
        String groupId = null;
        String group = null;
        String typeId = null;
        String type = null;
        String siteId = null;
        String site = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiVirtualizationClustersList(name, idIn, q, groupId, group, typeId, type, siteId, site, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClustersPartialUpdateTest() throws ApiException {
        WritableCluster body = null;
        Integer id = null;
        Cluster response = api.apiVirtualizationClustersPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClustersReadTest() throws ApiException {
        Integer id = null;
        Cluster response = api.apiVirtualizationClustersRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationClustersUpdateTest() throws ApiException {
        WritableCluster body = null;
        Integer id = null;
        Cluster response = api.apiVirtualizationClustersUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationInterfacesCreateTest() throws ApiException {
        WritableInterface body = null;
        ModelInterface response = api.apiVirtualizationInterfacesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationInterfacesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiVirtualizationInterfacesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationInterfacesListTest() throws ApiException {
        String name = null;
        String enabled = null;
        BigDecimal mtu = null;
        String virtualMachineId = null;
        String virtualMachine = null;
        String macAddress = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiVirtualizationInterfacesList(name, enabled, mtu, virtualMachineId, virtualMachine, macAddress, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationInterfacesPartialUpdateTest() throws ApiException {
        WritableInterface body = null;
        Integer id = null;
        ModelInterface response = api.apiVirtualizationInterfacesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationInterfacesReadTest() throws ApiException {
        Integer id = null;
        ModelInterface response = api.apiVirtualizationInterfacesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationInterfacesUpdateTest() throws ApiException {
        WritableInterface body = null;
        Integer id = null;
        ModelInterface response = api.apiVirtualizationInterfacesUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationVirtualMachinesCreateTest() throws ApiException {
        WritableVirtualMachine body = null;
        VirtualMachine response = api.apiVirtualizationVirtualMachinesCreate(body);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationVirtualMachinesDeleteTest() throws ApiException {
        Integer id = null;
        api.apiVirtualizationVirtualMachinesDelete(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationVirtualMachinesListTest() throws ApiException {
        String name = null;
        String cluster = null;
        String idIn = null;
        String q = null;
        String status = null;
        String clusterGroupId = null;
        String clusterGroup = null;
        String clusterTypeId = null;
        String clusterType = null;
        String clusterId = null;
        BigDecimal regionId = null;
        String region = null;
        String siteId = null;
        String site = null;
        String roleId = null;
        String role = null;
        String tenantId = null;
        String tenant = null;
        String platformId = null;
        String platform = null;
        String tag = null;
        Integer limit = null;
        Integer offset = null;
        Object response = api.apiVirtualizationVirtualMachinesList(name, cluster, idIn, q, status, clusterGroupId, clusterGroup, clusterTypeId, clusterType, clusterId, regionId, region, siteId, site, roleId, role, tenantId, tenant, platformId, platform, tag, limit, offset);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationVirtualMachinesPartialUpdateTest() throws ApiException {
        WritableVirtualMachine body = null;
        Integer id = null;
        VirtualMachine response = api.apiVirtualizationVirtualMachinesPartialUpdate(body, id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationVirtualMachinesReadTest() throws ApiException {
        Integer id = null;
        VirtualMachineWithConfigContext response = api.apiVirtualizationVirtualMachinesRead(id);

        // TODO: test validations
    }
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void apiVirtualizationVirtualMachinesUpdateTest() throws ApiException {
        WritableVirtualMachine body = null;
        Integer id = null;
        VirtualMachine response = api.apiVirtualizationVirtualMachinesUpdate(body, id);

        // TODO: test validations
    }
}
