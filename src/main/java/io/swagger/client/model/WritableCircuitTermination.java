/*
 * NetBox API
 * API to access NetBox
 *
 * OpenAPI spec version: 2.5
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NestedCable;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * WritableCircuitTermination
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-11T16:11:54.626-06:00[America/Chicago]")public class WritableCircuitTermination {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("circuit")
  private Integer circuit = null;
  /**
   * Gets or Sets termSide
   */
  @JsonAdapter(TermSideEnum.Adapter.class)
  public enum TermSideEnum {
    A("A"),
    Z("Z");

    private String value;

    TermSideEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TermSideEnum fromValue(String text) {
      for (TermSideEnum b : TermSideEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TermSideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TermSideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TermSideEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TermSideEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("term_side")
  private TermSideEnum termSide = null;

  @SerializedName("site")
  private Integer site = null;

  @SerializedName("port_speed")
  private Integer portSpeed = null;

  @SerializedName("upstream_speed")
  private Integer upstreamSpeed = null;

  @SerializedName("xconnect_id")
  private String xconnectId = null;

  @SerializedName("pp_info")
  private String ppInfo = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("connected_endpoint_type")
  private String connectedEndpointType = null;

  @SerializedName("connected_endpoint")
  private String connectedEndpoint = null;

  @SerializedName("connection_status")
  private Boolean connectionStatus = null;

  @SerializedName("cable")
  private NestedCable cable = null;
  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public WritableCircuitTermination circuit(Integer circuit) {
    this.circuit = circuit;
    return this;
  }

  

  /**
  * Get circuit
  * @return circuit
  **/
  @Schema(required = true, description = "")
  public Integer getCircuit() {
    return circuit;
  }
  public void setCircuit(Integer circuit) {
    this.circuit = circuit;
  }
  public WritableCircuitTermination termSide(TermSideEnum termSide) {
    this.termSide = termSide;
    return this;
  }

  

  /**
  * Get termSide
  * @return termSide
  **/
  @Schema(required = true, description = "")
  public TermSideEnum getTermSide() {
    return termSide;
  }
  public void setTermSide(TermSideEnum termSide) {
    this.termSide = termSide;
  }
  public WritableCircuitTermination site(Integer site) {
    this.site = site;
    return this;
  }

  

  /**
  * Get site
  * @return site
  **/
  @Schema(required = true, description = "")
  public Integer getSite() {
    return site;
  }
  public void setSite(Integer site) {
    this.site = site;
  }
  public WritableCircuitTermination portSpeed(Integer portSpeed) {
    this.portSpeed = portSpeed;
    return this;
  }

  

  /**
  * Get portSpeed
  * minimum: 0
  * maximum: 2147483647
  * @return portSpeed
  **/
  @Schema(required = true, description = "")
  public Integer getPortSpeed() {
    return portSpeed;
  }
  public void setPortSpeed(Integer portSpeed) {
    this.portSpeed = portSpeed;
  }
  public WritableCircuitTermination upstreamSpeed(Integer upstreamSpeed) {
    this.upstreamSpeed = upstreamSpeed;
    return this;
  }

  

  /**
  * Upstream speed, if different from port speed
  * minimum: 0
  * maximum: 2147483647
  * @return upstreamSpeed
  **/
  @Schema(description = "Upstream speed, if different from port speed")
  public Integer getUpstreamSpeed() {
    return upstreamSpeed;
  }
  public void setUpstreamSpeed(Integer upstreamSpeed) {
    this.upstreamSpeed = upstreamSpeed;
  }
  public WritableCircuitTermination xconnectId(String xconnectId) {
    this.xconnectId = xconnectId;
    return this;
  }

  

  /**
  * Get xconnectId
  * @return xconnectId
  **/
  @Schema(description = "")
  public String getXconnectId() {
    return xconnectId;
  }
  public void setXconnectId(String xconnectId) {
    this.xconnectId = xconnectId;
  }
  public WritableCircuitTermination ppInfo(String ppInfo) {
    this.ppInfo = ppInfo;
    return this;
  }

  

  /**
  * Get ppInfo
  * @return ppInfo
  **/
  @Schema(description = "")
  public String getPpInfo() {
    return ppInfo;
  }
  public void setPpInfo(String ppInfo) {
    this.ppInfo = ppInfo;
  }
  public WritableCircuitTermination description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  /**
  * Get connectedEndpointType
  * @return connectedEndpointType
  **/
  @Schema(description = "")
  public String getConnectedEndpointType() {
    return connectedEndpointType;
  }
  /**
  * Get connectedEndpoint
  * @return connectedEndpoint
  **/
  @Schema(description = "")
  public String getConnectedEndpoint() {
    return connectedEndpoint;
  }
  public WritableCircuitTermination connectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
    return this;
  }

  

  /**
  * Get connectionStatus
  * @return connectionStatus
  **/
  @Schema(description = "")
  public Boolean isConnectionStatus() {
    return connectionStatus;
  }
  public void setConnectionStatus(Boolean connectionStatus) {
    this.connectionStatus = connectionStatus;
  }
  public WritableCircuitTermination cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  

  /**
  * Get cable
  * @return cable
  **/
  @Schema(description = "")
  public NestedCable getCable() {
    return cable;
  }
  public void setCable(NestedCable cable) {
    this.cable = cable;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WritableCircuitTermination writableCircuitTermination = (WritableCircuitTermination) o;
    return Objects.equals(this.id, writableCircuitTermination.id) &&
        Objects.equals(this.circuit, writableCircuitTermination.circuit) &&
        Objects.equals(this.termSide, writableCircuitTermination.termSide) &&
        Objects.equals(this.site, writableCircuitTermination.site) &&
        Objects.equals(this.portSpeed, writableCircuitTermination.portSpeed) &&
        Objects.equals(this.upstreamSpeed, writableCircuitTermination.upstreamSpeed) &&
        Objects.equals(this.xconnectId, writableCircuitTermination.xconnectId) &&
        Objects.equals(this.ppInfo, writableCircuitTermination.ppInfo) &&
        Objects.equals(this.description, writableCircuitTermination.description) &&
        Objects.equals(this.connectedEndpointType, writableCircuitTermination.connectedEndpointType) &&
        Objects.equals(this.connectedEndpoint, writableCircuitTermination.connectedEndpoint) &&
        Objects.equals(this.connectionStatus, writableCircuitTermination.connectionStatus) &&
        Objects.equals(this.cable, writableCircuitTermination.cable);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, circuit, termSide, site, portSpeed, upstreamSpeed, xconnectId, ppInfo, description, connectedEndpointType, connectedEndpoint, connectionStatus, cable);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WritableCircuitTermination {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    circuit: ").append(toIndentedString(circuit)).append("\n");
    sb.append("    termSide: ").append(toIndentedString(termSide)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    portSpeed: ").append(toIndentedString(portSpeed)).append("\n");
    sb.append("    upstreamSpeed: ").append(toIndentedString(upstreamSpeed)).append("\n");
    sb.append("    xconnectId: ").append(toIndentedString(xconnectId)).append("\n");
    sb.append("    ppInfo: ").append(toIndentedString(ppInfo)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    connectedEndpointType: ").append(toIndentedString(connectedEndpointType)).append("\n");
    sb.append("    connectedEndpoint: ").append(toIndentedString(connectedEndpoint)).append("\n");
    sb.append("    connectionStatus: ").append(toIndentedString(connectionStatus)).append("\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
