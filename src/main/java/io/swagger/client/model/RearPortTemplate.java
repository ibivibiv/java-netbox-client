/*
 * NetBox API
 * API to access NetBox
 *
 * OpenAPI spec version: 2.5
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NestedDeviceType;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * RearPortTemplate
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-11T16:11:54.626-06:00[America/Chicago]")public class RearPortTemplate {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("device_type")
  private NestedDeviceType deviceType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("type")
  private Object type = null;

  @SerializedName("positions")
  private Integer positions = null;
  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public RearPortTemplate deviceType(NestedDeviceType deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  

  /**
  * Get deviceType
  * @return deviceType
  **/
  @Schema(required = true, description = "")
  public NestedDeviceType getDeviceType() {
    return deviceType;
  }
  public void setDeviceType(NestedDeviceType deviceType) {
    this.deviceType = deviceType;
  }
  public RearPortTemplate name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public RearPortTemplate type(Object type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(required = true, description = "")
  public Object getType() {
    return type;
  }
  public void setType(Object type) {
    this.type = type;
  }
  public RearPortTemplate positions(Integer positions) {
    this.positions = positions;
    return this;
  }

  

  /**
  * Get positions
  * minimum: 1
  * maximum: 64
  * @return positions
  **/
  @Schema(description = "")
  public Integer getPositions() {
    return positions;
  }
  public void setPositions(Integer positions) {
    this.positions = positions;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RearPortTemplate rearPortTemplate = (RearPortTemplate) o;
    return Objects.equals(this.id, rearPortTemplate.id) &&
        Objects.equals(this.deviceType, rearPortTemplate.deviceType) &&
        Objects.equals(this.name, rearPortTemplate.name) &&
        Objects.equals(this.type, rearPortTemplate.type) &&
        Objects.equals(this.positions, rearPortTemplate.positions);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, deviceType, name, type, positions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RearPortTemplate {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
