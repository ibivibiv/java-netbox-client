/*
 * NetBox API
 * API to access NetBox
 *
 * OpenAPI spec version: 2.5
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * ImageAttachment
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-11T16:11:54.626-06:00[America/Chicago]")public class ImageAttachment {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("content_type")
  private String contentType = null;

  @SerializedName("object_id")
  private Integer objectId = null;

  @SerializedName("parent")
  private String parent = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("image")
  private String image = null;

  @SerializedName("image_height")
  private Integer imageHeight = null;

  @SerializedName("image_width")
  private Integer imageWidth = null;

  @SerializedName("created")
  private OffsetDateTime created = null;
  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public ImageAttachment contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  

  /**
  * Get contentType
  * @return contentType
  **/
  @Schema(required = true, description = "")
  public String getContentType() {
    return contentType;
  }
  public void setContentType(String contentType) {
    this.contentType = contentType;
  }
  public ImageAttachment objectId(Integer objectId) {
    this.objectId = objectId;
    return this;
  }

  

  /**
  * Get objectId
  * minimum: 0
  * maximum: 2147483647
  * @return objectId
  **/
  @Schema(required = true, description = "")
  public Integer getObjectId() {
    return objectId;
  }
  public void setObjectId(Integer objectId) {
    this.objectId = objectId;
  }
  /**
  * Get parent
  * @return parent
  **/
  @Schema(description = "")
  public String getParent() {
    return parent;
  }
  public ImageAttachment name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  /**
  * Get image
  * @return image
  **/
  @Schema(description = "")
  public String getImage() {
    return image;
  }
  public ImageAttachment imageHeight(Integer imageHeight) {
    this.imageHeight = imageHeight;
    return this;
  }

  

  /**
  * Get imageHeight
  * minimum: 0
  * maximum: 32767
  * @return imageHeight
  **/
  @Schema(required = true, description = "")
  public Integer getImageHeight() {
    return imageHeight;
  }
  public void setImageHeight(Integer imageHeight) {
    this.imageHeight = imageHeight;
  }
  public ImageAttachment imageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
    return this;
  }

  

  /**
  * Get imageWidth
  * minimum: 0
  * maximum: 32767
  * @return imageWidth
  **/
  @Schema(required = true, description = "")
  public Integer getImageWidth() {
    return imageWidth;
  }
  public void setImageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
  }
  /**
  * Get created
  * @return created
  **/
  @Schema(description = "")
  public OffsetDateTime getCreated() {
    return created;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageAttachment imageAttachment = (ImageAttachment) o;
    return Objects.equals(this.id, imageAttachment.id) &&
        Objects.equals(this.contentType, imageAttachment.contentType) &&
        Objects.equals(this.objectId, imageAttachment.objectId) &&
        Objects.equals(this.parent, imageAttachment.parent) &&
        Objects.equals(this.name, imageAttachment.name) &&
        Objects.equals(this.image, imageAttachment.image) &&
        Objects.equals(this.imageHeight, imageAttachment.imageHeight) &&
        Objects.equals(this.imageWidth, imageAttachment.imageWidth) &&
        Objects.equals(this.created, imageAttachment.created);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, contentType, objectId, parent, name, image, imageHeight, imageWidth, created);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageAttachment {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    objectId: ").append(toIndentedString(objectId)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageHeight: ").append(toIndentedString(imageHeight)).append("\n");
    sb.append("    imageWidth: ").append(toIndentedString(imageWidth)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
