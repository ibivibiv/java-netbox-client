/*
 * NetBox API
 * API to access NetBox
 *
 * OpenAPI spec version: 2.5
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NestedDevice;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * DeviceBay
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-11T16:11:54.626-06:00[America/Chicago]")public class DeviceBay {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("device")
  private NestedDevice device = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("installed_device")
  private NestedDevice installedDevice = null;

  @SerializedName("tags")
  private List<String> tags = null;
  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public DeviceBay device(NestedDevice device) {
    this.device = device;
    return this;
  }

  

  /**
  * Get device
  * @return device
  **/
  @Schema(required = true, description = "")
  public NestedDevice getDevice() {
    return device;
  }
  public void setDevice(NestedDevice device) {
    this.device = device;
  }
  public DeviceBay name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public DeviceBay installedDevice(NestedDevice installedDevice) {
    this.installedDevice = installedDevice;
    return this;
  }

  

  /**
  * Get installedDevice
  * @return installedDevice
  **/
  @Schema(description = "")
  public NestedDevice getInstalledDevice() {
    return installedDevice;
  }
  public void setInstalledDevice(NestedDevice installedDevice) {
    this.installedDevice = installedDevice;
  }
  public DeviceBay tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DeviceBay addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
  * Get tags
  * @return tags
  **/
  @Schema(description = "")
  public List<String> getTags() {
    return tags;
  }
  public void setTags(List<String> tags) {
    this.tags = tags;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceBay deviceBay = (DeviceBay) o;
    return Objects.equals(this.id, deviceBay.id) &&
        Objects.equals(this.device, deviceBay.device) &&
        Objects.equals(this.name, deviceBay.name) &&
        Objects.equals(this.installedDevice, deviceBay.installedDevice) &&
        Objects.equals(this.tags, deviceBay.tags);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, device, name, installedDevice, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceBay {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    installedDevice: ").append(toIndentedString(installedDevice)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
