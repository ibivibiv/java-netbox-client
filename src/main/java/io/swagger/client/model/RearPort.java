/*
 * NetBox API
 * API to access NetBox
 *
 * OpenAPI spec version: 2.5
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NestedCable;
import io.swagger.client.model.NestedDevice;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * RearPort
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-11T16:11:54.626-06:00[America/Chicago]")public class RearPort {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("device")
  private NestedDevice device = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("type")
  private Object type = null;

  @SerializedName("positions")
  private Integer positions = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("cable")
  private NestedCable cable = null;

  @SerializedName("tags")
  private List<String> tags = null;
  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public RearPort device(NestedDevice device) {
    this.device = device;
    return this;
  }

  

  /**
  * Get device
  * @return device
  **/
  @Schema(required = true, description = "")
  public NestedDevice getDevice() {
    return device;
  }
  public void setDevice(NestedDevice device) {
    this.device = device;
  }
  public RearPort name(String name) {
    this.name = name;
    return this;
  }

  

  /**
  * Get name
  * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  public RearPort type(Object type) {
    this.type = type;
    return this;
  }

  

  /**
  * Get type
  * @return type
  **/
  @Schema(required = true, description = "")
  public Object getType() {
    return type;
  }
  public void setType(Object type) {
    this.type = type;
  }
  public RearPort positions(Integer positions) {
    this.positions = positions;
    return this;
  }

  

  /**
  * Get positions
  * minimum: 1
  * maximum: 64
  * @return positions
  **/
  @Schema(description = "")
  public Integer getPositions() {
    return positions;
  }
  public void setPositions(Integer positions) {
    this.positions = positions;
  }
  public RearPort description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public RearPort cable(NestedCable cable) {
    this.cable = cable;
    return this;
  }

  

  /**
  * Get cable
  * @return cable
  **/
  @Schema(description = "")
  public NestedCable getCable() {
    return cable;
  }
  public void setCable(NestedCable cable) {
    this.cable = cable;
  }
  public RearPort tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public RearPort addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
  * Get tags
  * @return tags
  **/
  @Schema(description = "")
  public List<String> getTags() {
    return tags;
  }
  public void setTags(List<String> tags) {
    this.tags = tags;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RearPort rearPort = (RearPort) o;
    return Objects.equals(this.id, rearPort.id) &&
        Objects.equals(this.device, rearPort.device) &&
        Objects.equals(this.name, rearPort.name) &&
        Objects.equals(this.type, rearPort.type) &&
        Objects.equals(this.positions, rearPort.positions) &&
        Objects.equals(this.description, rearPort.description) &&
        Objects.equals(this.cable, rearPort.cable) &&
        Objects.equals(this.tags, rearPort.tags);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, device, name, type, positions, description, cable, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RearPort {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    cable: ").append(toIndentedString(cable)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
