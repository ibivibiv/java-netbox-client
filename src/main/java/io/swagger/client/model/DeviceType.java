/*
 * NetBox API
 * API to access NetBox
 *
 * OpenAPI spec version: 2.5
 * Contact: netbox@digitalocean.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.NestedManufacturer;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.LocalDate;
import org.threeten.bp.OffsetDateTime;

/**
 * DeviceType
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-02-11T16:11:54.626-06:00[America/Chicago]")public class DeviceType {

  @SerializedName("id")
  private Integer id = null;

  @SerializedName("manufacturer")
  private NestedManufacturer manufacturer = null;

  @SerializedName("model")
  private String model = null;

  @SerializedName("slug")
  private String slug = null;

  @SerializedName("part_number")
  private String partNumber = null;

  @SerializedName("u_height")
  private Integer uHeight = null;

  @SerializedName("is_full_depth")
  private Boolean isFullDepth = null;

  @SerializedName("subdevice_role")
  private Object subdeviceRole = null;

  @SerializedName("comments")
  private String comments = null;

  @SerializedName("tags")
  private List<String> tags = null;

  @SerializedName("custom_fields")
  private Object customFields = null;

  @SerializedName("created")
  private LocalDate created = null;

  @SerializedName("last_updated")
  private OffsetDateTime lastUpdated = null;

  @SerializedName("instance_count")
  private Integer instanceCount = null;
  /**
  * Get id
  * @return id
  **/
  @Schema(description = "")
  public Integer getId() {
    return id;
  }
  public DeviceType manufacturer(NestedManufacturer manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  

  /**
  * Get manufacturer
  * @return manufacturer
  **/
  @Schema(required = true, description = "")
  public NestedManufacturer getManufacturer() {
    return manufacturer;
  }
  public void setManufacturer(NestedManufacturer manufacturer) {
    this.manufacturer = manufacturer;
  }
  public DeviceType model(String model) {
    this.model = model;
    return this;
  }

  

  /**
  * Get model
  * @return model
  **/
  @Schema(required = true, description = "")
  public String getModel() {
    return model;
  }
  public void setModel(String model) {
    this.model = model;
  }
  public DeviceType slug(String slug) {
    this.slug = slug;
    return this;
  }

  

  /**
  * Get slug
  * @return slug
  **/
  @Schema(required = true, description = "")
  public String getSlug() {
    return slug;
  }
  public void setSlug(String slug) {
    this.slug = slug;
  }
  public DeviceType partNumber(String partNumber) {
    this.partNumber = partNumber;
    return this;
  }

  

  /**
  * Discrete part number (optional)
  * @return partNumber
  **/
  @Schema(description = "Discrete part number (optional)")
  public String getPartNumber() {
    return partNumber;
  }
  public void setPartNumber(String partNumber) {
    this.partNumber = partNumber;
  }
  public DeviceType uHeight(Integer uHeight) {
    this.uHeight = uHeight;
    return this;
  }

  

  /**
  * Get uHeight
  * minimum: 0
  * maximum: 32767
  * @return uHeight
  **/
  @Schema(description = "")
  public Integer getUHeight() {
    return uHeight;
  }
  public void setUHeight(Integer uHeight) {
    this.uHeight = uHeight;
  }
  public DeviceType isFullDepth(Boolean isFullDepth) {
    this.isFullDepth = isFullDepth;
    return this;
  }

  

  /**
  * Device consumes both front and rear rack faces
  * @return isFullDepth
  **/
  @Schema(description = "Device consumes both front and rear rack faces")
  public Boolean isIsFullDepth() {
    return isFullDepth;
  }
  public void setIsFullDepth(Boolean isFullDepth) {
    this.isFullDepth = isFullDepth;
  }
  public DeviceType subdeviceRole(Object subdeviceRole) {
    this.subdeviceRole = subdeviceRole;
    return this;
  }

  

  /**
  * Get subdeviceRole
  * @return subdeviceRole
  **/
  @Schema(description = "")
  public Object getSubdeviceRole() {
    return subdeviceRole;
  }
  public void setSubdeviceRole(Object subdeviceRole) {
    this.subdeviceRole = subdeviceRole;
  }
  public DeviceType comments(String comments) {
    this.comments = comments;
    return this;
  }

  

  /**
  * Get comments
  * @return comments
  **/
  @Schema(description = "")
  public String getComments() {
    return comments;
  }
  public void setComments(String comments) {
    this.comments = comments;
  }
  public DeviceType tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public DeviceType addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
  * Get tags
  * @return tags
  **/
  @Schema(description = "")
  public List<String> getTags() {
    return tags;
  }
  public void setTags(List<String> tags) {
    this.tags = tags;
  }
  public DeviceType customFields(Object customFields) {
    this.customFields = customFields;
    return this;
  }

  

  /**
  * Get customFields
  * @return customFields
  **/
  @Schema(description = "")
  public Object getCustomFields() {
    return customFields;
  }
  public void setCustomFields(Object customFields) {
    this.customFields = customFields;
  }
  /**
  * Get created
  * @return created
  **/
  @Schema(description = "")
  public LocalDate getCreated() {
    return created;
  }
  /**
  * Get lastUpdated
  * @return lastUpdated
  **/
  @Schema(description = "")
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }
  /**
  * Get instanceCount
  * @return instanceCount
  **/
  @Schema(description = "")
  public Integer getInstanceCount() {
    return instanceCount;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceType deviceType = (DeviceType) o;
    return Objects.equals(this.id, deviceType.id) &&
        Objects.equals(this.manufacturer, deviceType.manufacturer) &&
        Objects.equals(this.model, deviceType.model) &&
        Objects.equals(this.slug, deviceType.slug) &&
        Objects.equals(this.partNumber, deviceType.partNumber) &&
        Objects.equals(this.uHeight, deviceType.uHeight) &&
        Objects.equals(this.isFullDepth, deviceType.isFullDepth) &&
        Objects.equals(this.subdeviceRole, deviceType.subdeviceRole) &&
        Objects.equals(this.comments, deviceType.comments) &&
        Objects.equals(this.tags, deviceType.tags) &&
        Objects.equals(this.customFields, deviceType.customFields) &&
        Objects.equals(this.created, deviceType.created) &&
        Objects.equals(this.lastUpdated, deviceType.lastUpdated) &&
        Objects.equals(this.instanceCount, deviceType.instanceCount);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, manufacturer, model, slug, partNumber, uHeight, isFullDepth, subdeviceRole, comments, tags, customFields, created, lastUpdated, instanceCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceType {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    partNumber: ").append(toIndentedString(partNumber)).append("\n");
    sb.append("    uHeight: ").append(toIndentedString(uHeight)).append("\n");
    sb.append("    isFullDepth: ").append(toIndentedString(isFullDepth)).append("\n");
    sb.append("    subdeviceRole: ").append(toIndentedString(subdeviceRole)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    instanceCount: ").append(toIndentedString(instanceCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
